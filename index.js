// Set factors of generators A & B
const factorA = 16807;
const factorB = 48271;

// Set divisor value
const divisor = 2147483647;

// Set start values of generators A & B
const startA = 65;
const startB = 8921;

// Set of iterations number
const iterations = 40000000;

// Function converting the binary representation of a given number
const toBinary = number => {
	return (number >>> 0).toString(2);
}

// Initiate count and start values of generators A & B
var valueA = startA;
var valueB = startB;
var count = 0;


for (let i=0; i<iterations; i++) {
	// Get values generated by generators A & B
	valueA = (valueA * factorA) % divisor;
	valueB = (valueB * factorB) % divisor;

	// Get binaries representation of values generated by generators A & B
	let binaryA = toBinary(valueA);
	let binaryB = toBinary(valueB);

	// Increment count if the least significant 16 bits of binaries representation match
	if( parseInt(binaryA.slice(-16)) === parseInt(binaryB.slice(-16)) ) {
		count++; 
	}
}

console.log(count + ' matching pairs for starting values ' + startA + ' & ' + startB);